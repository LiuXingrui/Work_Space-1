
#include <iostream>
#include<cstring>
#include<string>
#include<vector>
#include <fstream>
#include <math.h> 
#include <random>
#include <thread>
#include <mutex>
#include <omp.h>

using namespace std;
#include <itpp/itbase.h>
#include <itpp/itcomm.h>
using namespace itpp;




void burst_error_channel  ( bvec &m,double p1,int L1,int L2)
{
  int s=m.size();
  int my_random_number;
  bin ONE=1;
  vec p(5);

  p.zeros();
  p[2]=p1*0.5;
  p[3]=p1*0.5*0.5;
  p[4]=p1*0.5*0.5*0.5;


  
  int max_sidelength=4;
  for (int b = 2; b <= max_sidelength; ++b){
    
    for (int i=0;i<L1-b;++i){
      for (int j=0;j<L2-b;++j){
      
	my_random_number=randi(1,1000);
	if(my_random_number<=1000*p[b])
	  {
	    for (int i1=i;i1<i+b;++i1){
	      for (int j1=j;j1<j+b;++j1){
		m[i1*L1+j1]=m[i1*L1+j1]+randb();

	      }
	    }

	      }


	    }


	  }
 }

}

void RS_simulation (const int m,const int k,const double pmin,const double pmax,int num_of_p,const double num_of_cws){

  int n,d,t,L1,L2, num_lbits, num_pbits;
  double n_cor_cws=0.0;
  double pintv=(pmax-pmin)/(num_of_p-1);
  double p;
  int temp=num_of_cws;
  mat   counter(num_of_p,temp);
   //   double p=pmin;
  n=pow(2,m)-1;

  
  d=n-k+1;
  
    t=(d-1)/2;
     Reed_Solomon RS(m,t);
  num_lbits=m*k;
  num_pbits=m*n;
 
   L1=m*(pow(2,ceil_i(m/2-log(m)/log(2))));
   L2=pow(2,m-ceil_i(m/2-log(m)/log(2)));
   

    Array<bvec> cw(num_of_cws),cor_cw(num_of_cws),mas(num_of_cws),dec_mas(num_of_cws);
  bvec tempvec1(num_pbits),tempvec2(num_lbits);
  tempvec1.zeros();
  tempvec2.zeros();
  counter.zeros();
  cout<<"  n="<<n<<", k="<<k<<", d= "<<d<<" Reed-Solomon:ListPlot[{"<<endl;
  for (int pi=1;pi<num_of_p;++pi){
       p=pmin+pi*pintv;
     BSC bsc(p);
     n_cor_cws=0;
     
 
  
    #pragma omp parallel for
  for (int i=0;i<temp;i++)
    
  {  cw(i)=tempvec1;
    cor_cw(i)=tempvec1;
    dec_mas(i)=tempvec2;

    mas(i)=randb(num_lbits);

    cw(i)=RS.encode(mas(i));
  
    cor_cw(i)=bsc(cw(i));
    
    burst_error_channel(cor_cw(i),p,L1,L2);

    if (cw(i)!=cor_cw(i)){
    dec_mas(i)=RS.decode(cor_cw(i));

    //   cout<<"4"<<endl;
      
    if (dec_mas(i)!=mas(i))
    {
      counter(pi,i)=1.0 ;
    
  }
    }
    
  }
  cout<<p<<endl;

  }

  for (int pi=0;pi<num_of_p;++pi){
    n_cor_cws=0;
    p=pmin+pi*pintv;

  for (int i=0;i<temp;++i){

    n_cor_cws=n_cor_cws+counter(pi,i);
 
  }
  cout<<"{"<<p<<", "<<n_cor_cws/num_of_cws<<"},"<<endl;
     
  }
     
   
double ndou=n*1.0;
 double kdou=k*1.0;
 double rate=kdou/ndou;
 cout<<"},Joined->True,AxesLabel->{RBER,UBER},PlotLabel->\"["<<n<<", "<<k<<", Rate="<<rate<<"] Reed-Solomon code\"]\n"<<endl;

  

}

int main()
{
    double pmin=pow(10,-6);
   double pmax=5*pow(10,-3);
  //  double pmin=0.9;
  // double pmax=1;
  
  double num_of_cws=100.0;
  int num_of_p=10;
  
  ivec k(4);
  k(0)=ceil(0.8839*(pow(2,14)-1));
  k(1)=ceil(0.8189*(pow(2,13)-1));
  k(2)=ceil(0.7840*(pow(2,12)-1));
  k(3)=ceil(0.7270*(pow(2,11)-1));

  for (int i=0;i<4;i++){
    if (k(i)%2==0){

      ++ k(i);
    }
  }
  
		    
  RS_simulation(9,k(2),pmin,pmax,num_of_p,num_of_cws);
  //  RS_simulation (11,k(3),pmin,pmax,num_of_p,num_of_cws);
  // RS_simulation (12,k(2),pmin,pmax,num_of_p,num_of_cws);
  //    RS_simulation (13,k(1),pmin,pmax,num_of_p,num_of_cws);
  //  RS_simulation (14,k(0),pmin,pmax,num_of_p,num_of_cws);


  
  
  
 
  return 0;
}
