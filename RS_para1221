#include <iostream>
#include<cstring>
#include<string>
#include<vector>
#include <fstream>
#include <math.h> 
#include <random>
#include <thread>
#include <mutex>
#include <omp.h>

using namespace std;
#include <itpp/itbase.h>
#include <itpp/itcomm.h>
using namespace itpp;


bmat bvec_to_bmatrix(const bvec &v,int r,int c)
//convert bvec to bmat, if v.size<r*c, add 0s, if v.size>r*c, disregrad those entries
{

  //cout<<"vsize="<<v.size()<<endl;

  if (v.size()>r*c){

    cout<<"error in bvec_to_bmat: size of v is larger than r*c"<<endl;
    return 0;
  }
  bmat m(r,c);
  m.zeros();
  int index=0;
  for (int i = 0; i <= r-1 && index<v.size(); ++i)
    {
      for (int j=0;j<=c-1&& index<v.size() ;++j)
	{
	  m(i,j)=v[index];
	  index++;
	  // cout<<index<<endl;

	}

      
    }

  
  return m;
  
}

bvec bmat_to_bvector(const bmat &m,int s)
{

  int r=m.rows();
  int c=m.cols();
  if (s>r*c) {
    cout<<"error in bmat_to_bvec: s is larger than r*c"<<endl;
    return 0;
  }
  int k=0;
  int i,j;
  bvec v(s);
  v.zeros();
  int index=0;
  while(index< s){
    i=k/c;
    j=k%c;
    v[index]= m(i,j);
	  index++;
	  k++;

   }

      
   

  return v;
}


//bmat burst_error_channel(const bmat &m,double p2,double p3,double p4)
/*bmat burst_error_channel  (const bmat &m,double p1)
{
  int r=m.rows();
  int c=m.cols();
  int my_random_number;
  bmat m1=m;
  bin ONE=1;
  vec p(5);

  p.zeros();
  p[2]=p1*0.5;
  p[3]=p1*0.5*0.5;
  p[4]=p1*0.5*0.5*0.5;


  
  int max_sidelength=4;
  for (int b = 2; b <= max_sidelength; ++b){
    
    for (int r1=0;r1<=r-1-b;++r1){
      for (int c1=0;c1<=c-1-b;++c1){
	my_random_number=randi(1,1000);
	if(my_random_number<=1000*p[b])
	  {
	     for (int r2=0;r2<=b-1;++r2)
	       {
	       for (int c2=0;c2<=b-1;++c2)
	       {
		 m1(r2,c2)=m1(r2,c2)+randb();



	       }
	     }


	  }
	
  
 }


    }


  }

  return m1;

}

*/
void burst_error_channel  ( bvec &m,double p1,int L1,int L2)
{
  int s=m.size();
  int my_random_number;
  bin ONE=1;
  vec p(5);

  p.zeros();
  p[2]=p1*0.5;
  p[3]=p1*0.5*0.5;
  p[4]=p1*0.5*0.5*0.5;


  
  int max_sidelength=4;
  for (int b = 2; b <= max_sidelength; ++b){
    
    for (int i=0;i<L1-b;++i){
      for (int j=0;j<L2-b;++j){
      
	my_random_number=randi(1,1000);
	if(my_random_number<=1000*p[b])
	  {
	    for (int i1=i;i1<i+b;++i1){
	      for (int j1=j;j1<j+b;++j1){
		m[i1*L1+j1]=m[i1*L1+j1]+randb();

	      }
	    }

	      }


	    }


	  }
 }

}

double RS_simulation (int m,int k,double p,double num_of_cws){

  int n,d,t,L1,L2, num_lbits, num_pbits;
  double n_cor_cws=0;
  bvec mas,cw, cor_cw,dec_m;
  bmat cor_cw2,cor_cw3;

  n=pow(2,m)-1;
  d=n-k+1;
  
    t=(d-1)/2;
     Reed_Solomon RS(m,t);
  num_lbits=m*k;
  num_pbits=m*n;
 
   L1=m*(pow(2,ceil_i(m/2-log(m)/log(2))));
   L2=pow(2,m-ceil_i(m/2-log(m)/log(2)));
   BSC bsc(p);
  
  for (int i=0;i<num_of_cws;i++)
  {

    mas=randb(num_lbits);

    cw=RS.encode(mas);
  
     cor_cw=bsc(cw);
    
     burst_error_channel(cor_cw,p,L1,L2);
   
    dec_m=RS.decode(cor_cw);

 
    
      if (dec_m!=mas)
    {
    n_cor_cws++;
    
  }
    
  }

  return n_cor_cws/num_of_cws;

  

}

int main()
{
  int n,t,k,L1,L2,i1,i2,i3,d, num_lbits, num_pbits;
  double n_cor_cws=0;
  double num_of_cws=0;
  double p,p2;
  bvec mas,cw, cor_cw1,cor_cw4,rec_cw,dec_m;
  bmat cor_cw2,cor_cw3;

  omp_lock_t writelock;
     
  omp_init_lock(&writelock);


 RNG_randomize();
 num_of_cws=1;
 for (int m=10;m<=13;m++){

    n=pow(2,m)-1;

  i1=n*14/15;
  i2=n*9/10;
  i3=n/90;
  
    for (int j=0;j<=4;++j){
      k=i2+j*i3;
  //    #pragma omp parallel for
  //  for (int i=0;i<50;++i){
      //    k=i2+i3*(i/10);

          if (k%2==0){
      k=k+1;

  }

    d=n-k+1;
    //  if (i%10==0){
          cout<<"\n"<<endl;

    cout<<"for n="<<n<<", k="<<k<<", d= "<<d<<" Reed-Solomon code:ListPlot[{"<<endl;
    //   }
 
  

      #pragma omp parallel for 
    for (int i=1;i<=10;i++){ 

    p=i*0.001;
    cout<<endl;

    //if do not add this flash line, there will be segmentation fault(core dumped) error, donot know why
	p2=RS_simulation (m,k,p,num_of_cws);
     
	cout<<endl;
	//same reason
		 omp_set_lock(&writelock);
	cout<<"{"<<i*0.001<<", "<<p2<<"},";
	 omp_unset_lock(&writelock);
  

 }
    cout<<"},Joined->True,AxesLabel->{RBER,UBER},PlotLabel->\"["<<n<<", "<<k<<", "<<d<<"] Reed-Solomon code\"]";
 }
 }

  omp_destroy_lock(&writelock);
 
  return 0;
}
